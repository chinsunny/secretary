package secretar.ui;

import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.Vector;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.apache.log4j.Logger;
import secretar.dao.DelegationDao;
import secretar.dao.DistanceDao;
import secretar.dao.DistancePartDao;
import secretar.dao.GroupDao;
import secretar.dao.LapDao;
import secretar.dao.LapPartDao;
import secretar.dao.TeamDao;
import secretar.dao.TeamMemberDao;
import secretar.logic.CompetitionLogic;
import secretar.logic.ScriptLogic;
import secretar.objects.Delegation;
import secretar.objects.Distance;
import secretar.objects.DistancePart;
import secretar.objects.Group;
import secretar.objects.Lap;
import secretar.objects.LapPart;
import secretar.objects.Team;
import secretar.objects.TeamMember;

/**
 *
 * @author Filatov
 */
public class MainFrame extends javax.swing.JFrame {
    private static Logger logger = Logger.getLogger(MainFrame.class);

    private CompetitionLogic competitionLogic;
    private ScriptLogic scriptLogic;

    private TeamDao teamDao;
    private TeamMemberDao teamMemberDao;
    private DelegationDao delegationDao;
    private DistanceDao distanceDao;
    private GroupDao groupDao;
    private LapDao lapDao;

    private DistancePartDao distancePartDao;
    private LapPartDao lapPartDao;

    public void setCompetitionLogic(CompetitionLogic competitionLogic) {
        this.competitionLogic = competitionLogic;
    }

    public void setScriptLogic(ScriptLogic scriptLogic) {
        this.scriptLogic = scriptLogic;
    }

    public void setTeamDao(TeamDao teamDao) {
        this.teamDao = teamDao;
    }

    public void setTeamMemberDao(TeamMemberDao teamMemberDao) {
        this.teamMemberDao = teamMemberDao;
    }

    public void setDelegationDao(DelegationDao delegationDao) {
        this.delegationDao = delegationDao;
    }

    public void setDistanceDao(DistanceDao distanceDao) {
        this.distanceDao = distanceDao;
    }

    public void setGroupDao(GroupDao groupDao) {
        this.groupDao = groupDao;
    }

    public void setLapDao(LapDao lapDao) {
        this.lapDao = lapDao;
    }

    public void setDistancePartDao(DistancePartDao distancePartDao) {
        this.distancePartDao = distancePartDao;
    }

    public void setLapPartDao(LapPartDao lapPartDao) {
        this.lapPartDao = lapPartDao;
    }

    private java.util.List<secretar.objects.Delegation> delegationsList;
    private java.util.List<secretar.objects.Distance> distanceList;
    private java.util.List<secretar.objects.Group> groupList;
    private java.util.List<secretar.objects.Lap> lapList;
    private java.util.List<secretar.objects.Team> teamList;
    private java.util.List<secretar.objects.TeamMember> teamMembersList;

    private java.util.List<secretar.objects.DistancePart> distancePartList;

    private void initAdditionalComponents() {
        initDistances();
        initGroups();
        initLaps();
        initDelegations();
        initTeams();
        initTeamMembers();
        initDistanceParts();
        initFinish();
    }

    /** Creates new form MainFrame */
    public MainFrame() {
    }

    public void init(){
        initComponents();
        initAdditionalComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jFileChooser1 = new javax.swing.JFileChooser();
        jDialog2 = new javax.swing.JDialog();
        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        distanceTable = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        lapTable = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        groupTable = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        delegationTable = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        jPanel12 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        distancePartTable = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        jPanel14 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jScrollPane11 = new javax.swing.JScrollPane();
        finishTable = new javax.swing.JTable();
        jPanel8 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        teamTable = new javax.swing.JTable();
        jPanel10 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        teamMemberTable = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jDialog2Layout = new javax.swing.GroupLayout(jDialog2.getContentPane());
        jDialog2.getContentPane().setLayout(jDialog2Layout);
        jDialog2Layout.setHorizontalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog2Layout.setVerticalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 495, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jPanel2.add(jPanel3, java.awt.BorderLayout.PAGE_START);

        distanceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(distanceTable);

        jPanel2.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jScrollPane5.setViewportView(jPanel2);

        jTabbedPane1.addTab("Дистанции", jScrollPane5);

        jPanel6.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 498, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jPanel6.add(jPanel7, java.awt.BorderLayout.PAGE_START);

        lapTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(lapTable);

        jPanel6.add(jScrollPane4, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Этапы", jPanel6);

        jPanel4.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 498, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jPanel4.add(jPanel5, java.awt.BorderLayout.PAGE_START);

        groupTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(groupTable);

        jPanel4.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Группы", jPanel4);

        delegationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"1", "1", "1", "1"},
                {"1", "1", "1", "1"},
                {"1", "1", "1", "1"},
                {"1", "1", "1", null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        delegationTable.setName("delegationTable"); // NOI18N
        delegationTable.setOpaque(false);
        jScrollPane1.setViewportView(delegationTable);

        jTabbedPane1.addTab("Делегации", jScrollPane1);

        jPanel12.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 495, Short.MAX_VALUE)
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jPanel12.add(jPanel13, java.awt.BorderLayout.PAGE_START);

        distancePartTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane10.setViewportView(distancePartTable);

        jPanel12.add(jScrollPane10, java.awt.BorderLayout.CENTER);

        jScrollPane6.setViewportView(jPanel12);

        jTabbedPane1.addTab("Старт", jScrollPane6);

        jPanel14.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 496, Short.MAX_VALUE)
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jPanel14.add(jPanel15, java.awt.BorderLayout.PAGE_START);

        finishTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        finishTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                finishTableMouseClicked(evt);
            }
        });
        jScrollPane11.setViewportView(finishTable);

        jPanel14.add(jScrollPane11, java.awt.BorderLayout.CENTER);

        jScrollPane7.setViewportView(jPanel14);

        jTabbedPane1.addTab("Финиш", jScrollPane7);

        jPanel8.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 498, Short.MAX_VALUE)
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jPanel8.add(jPanel9, java.awt.BorderLayout.PAGE_START);

        teamTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane8.setViewportView(teamTable);

        jPanel8.add(jScrollPane8, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Команды", jPanel8);

        jPanel10.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 498, Short.MAX_VALUE)
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jPanel10.add(jPanel11, java.awt.BorderLayout.PAGE_START);

        teamMemberTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane9.setViewportView(teamMemberTable);

        jPanel10.add(jScrollPane9, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Участники", jPanel10);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 502, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 408, Short.MAX_VALUE)
        );

        jMenu1.setText("Файл");

        jMenuItem1.setText("Выход");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Редактировать");
        jMenuBar1.add(jMenu2);

        jMenu4.setText("Участники");

        jMenuItem2.setText("Загрузить мандат");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem2);

        jMenuBar1.add(jMenu4);

        jMenu5.setText("Соревнования");

        jMenuItem8.setText("Загрузка дистанций");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem8);

        jMenuItem3.setText("Жеребьевка");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem3);

        jMenuItem4.setText("Печать стартового протокола");
        jMenu5.add(jMenuItem4);

        jMenuItem5.setText("Печать результатов");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem5);

        jMenuBar1.add(jMenu5);

        jMenu6.setText("Отметка");

        jMenuItem6.setText("Выгрузить информацию для SI");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem6);

        jMenuItem7.setText("Загрузить информаци из SI");
        jMenu6.add(jMenuItem7);

        jMenuBar1.add(jMenu6);

        jMenu3.setText("Помощь");
        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initDelegations() {
//        entityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("jdbc:derby:E:\\tursamara\\secretarPU").createEntityManager();
//        competitionsQuery = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT c FROM Competitions c");
//        competitionsList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : competitionsQuery.getResultList();
//        teamsQuery = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT t FROM Teams t");
//        teamsList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : teamsQuery.getResultList();
//        delegationsQuery = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT d FROM Delegations d");
//        delegationsList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : delegationsQuery.getResultList();
//        teamMembersQuery = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT t FROM TeamMembers t");
//        teamMembersList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : teamMembersQuery.getResultList();
        delegationsList = delegationDao.list();
        Vector<String> tableHeaders = new Vector<String>();
        Vector tableData = new Vector();
        tableHeaders.add("Название");
        for (Delegation delegation : delegationsList) {
            Vector<Object> oneRow = new Vector<Object>();
            oneRow.add(delegation.getName());
            tableData.add(oneRow);
        }
        delegationTable.setModel(new DefaultTableModel(tableData, tableHeaders));
    }
    private void initDistances() {
        distanceList = distanceDao.list();
        Vector<String> tableHeaders = new Vector<String>();
        Vector tableData = new Vector();
        tableHeaders.add("Название");
        for (Distance distance : distanceList) {
            Vector<Object> oneRow = new Vector<Object>();
            oneRow.add(distance.getName());
            tableData.add(oneRow);
        }
        distanceTable.setModel(new DefaultTableModel(tableData, tableHeaders));
    }

    private void initGroups() {
        groupList = groupDao.list();
        Vector<String> tableHeaders = new Vector<String>();
        Vector tableData = new Vector();
        tableHeaders.add("Номер");
        tableHeaders.add("Название");
        tableHeaders.add("Дистанция");
        for (Group group : groupList) {
            Vector<Object> oneRow = new Vector<Object>();
            oneRow.add(group.getNumber());
            oneRow.add(group.getName());
            oneRow.add(group.getDistance().getName());
            tableData.add(oneRow);
        }
        groupTable.setModel(new DefaultTableModel(tableData, tableHeaders));

    }

    private void initLaps() {
        lapList = lapDao.list();

        Vector<String> tableHeaders = new Vector<String>();
        Vector tableData = new Vector();
        tableHeaders.add("Номер");
        tableHeaders.add("Название");
        tableHeaders.add("Дистанция");
        for (Lap lap : lapList) {
            Vector<Object> oneRow = new Vector<Object>();
            oneRow.add(lap.getNumber());
            oneRow.add(lap.getName());
            oneRow.add(lap.getDistance().getName());
            tableData.add(oneRow);
        }
        lapTable.setModel(new DefaultTableModel(tableData, tableHeaders));
    }

    private void initTeams() {
        teamList = teamDao.list();

        Vector<String> tableHeaders = new Vector<String>();
        Vector tableData = new Vector();
        tableHeaders.add("Полный номер команды");
        tableHeaders.add("Номер делегации");
        tableHeaders.add("Название делегации");
        tableHeaders.add("Номер команды");
        tableHeaders.add("Название команды");
        tableHeaders.add("Название группы");
        tableHeaders.add("Номер группы");
        tableHeaders.add("Номер чипа");
        for (Team team : teamList) {
            Vector<Object> oneRow = new Vector<Object>();
            oneRow.add(team.getFullNumber());
            oneRow.add(team.getDelegation().getNumber());
            oneRow.add(team.getDelegation().getName());
            oneRow.add(team.getNumber());
            oneRow.add(team.getName());
            oneRow.add(team.getGroup().getName());
            oneRow.add(team.getGroup().getNumber());
            oneRow.add(team.getChipNumber());
            tableData.add(oneRow);
        }
        teamTable.setModel(new DefaultTableModel(tableData, tableHeaders));

    }

    private void initTeamMembers() {
        teamMembersList = teamMemberDao.list();

        Vector<String> tableHeaders = new Vector<String>();
        Vector tableData = new Vector();
        tableHeaders.add("Полный номер команды");
        tableHeaders.add("Название команды");
        tableHeaders.add("ФИО");
        tableHeaders.add("Пол");
        tableHeaders.add("Разряд");
        tableHeaders.add("Год рождения");
        for (TeamMember teamMember : teamMembersList) {
            Vector<Object> oneRow = new Vector<Object>();
            oneRow.add(teamMember.getTeam().getFullNumber());
            oneRow.add(teamMember.getTeam().getName());
            oneRow.add(teamMember.getName());
            oneRow.add(teamMember.getGender());
            oneRow.add(teamMember.getRank());
            oneRow.add(teamMember.getBirthYear());
            tableData.add(oneRow);
        }
        teamMemberTable.setModel(new DefaultTableModel(tableData, tableHeaders));
    }

    private void initDistanceParts() {
        distancePartList = distancePartDao.list();
        Vector<String> tableHeaders = new Vector<String>();
        Vector tableData = new Vector();
        tableHeaders.add("Полный номер команды");
        tableHeaders.add("Название команды");
        tableHeaders.add("Участники");
        tableHeaders.add("Время старта");
        for (DistancePart distancePart : distancePartList) {
            Vector<Object> oneRow = new Vector<Object>();
            oneRow.add(distancePart.getTeam().getFullNumber());
            oneRow.add(distancePart.getTeam().getName());
            oneRow.add(competitionLogic.getTeamMembersString(distancePart.getTeam()));
            oneRow.add(distancePart.getStartTime() != null ? distancePart.getStartTime().toString() : "");
            tableData.add(oneRow);
        }
        distancePartTable.setModel(new DefaultTableModel(tableData, tableHeaders));
    }

    private void initFinish(){
        distancePartList = competitionLogic.getCalculatedDistanceParts();
        Vector<String> tableHeaders = new Vector<String>();
        Vector tableData = new Vector();
        tableHeaders.add("Полный номер команды");
        tableHeaders.add("Название команды");
        tableHeaders.add("Группа");
        tableHeaders.add("Участники");
        tableHeaders.add("Отсечка");
        tableHeaders.add("Штрафное время");
        tableHeaders.add("Время финиша");
        tableHeaders.add("Результат");
        tableHeaders.add("Снятий");
        tableHeaders.add("Снятие с дистанции");
        tableHeaders.add("Место");
        tableHeaders.add("Очки");

        for (DistancePart distancePart : distancePartList) {
            Vector<Object> oneRow = new Vector<Object>();
            oneRow.add(distancePart.getTeam().getFullNumber());
            oneRow.add(distancePart.getTeam().getName());
            oneRow.add(distancePart.getTeam().getGroup().getName());
            oneRow.add(competitionLogic.getTeamMembersString(distancePart.getTeam()));
            oneRow.add(distancePart.getMinusTime());
            oneRow.add(distancePart.getPlusTime());
            oneRow.add(distancePart.getFinishTime());
            oneRow.add(distancePart.isComplete() ? distancePart.getResult() : "" );
            oneRow.add(competitionLogic.getTeamFailCount(distancePart));
            oneRow.add(competitionLogic.getTeamCompleteFailCount(distancePart));
            oneRow.add(distancePart.getFinishOrder() == null ? "" : distancePart.getFinishOrder());
            oneRow.add(distancePart.getScores() == null ? "" : distancePart.getScores());
            tableData.add(oneRow);
        }
        finishTable.setRowSelectionAllowed(true);
        finishTable.setColumnSelectionAllowed(false);
        finishTable.setColumnSelectionAllowed(false);

        finishTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        finishTable.setAutoCreateRowSorter(true);
        finishTable.setModel(new DefaultTableModel(tableData, tableHeaders){

            @Override
            public boolean isCellEditable(int arg0, int arg1) {
                return false;
            }

        });
    }



    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        this.setVisible(false);
        System.exit(0);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        int result = jFileChooser1.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            File file = jFileChooser1.getSelectedFile();
            //This is where a real application would open the file.
            logger.info("Opening: " + file.getName() + ".");

            try {
                scriptLogic.loadMandat(file.getPath());
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            } finally {
                initDelegations();
                initTeams();
                initTeamMembers();
            }
           
        } else {
            logger.info("Open command cancelled by user.");
        }


    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        int result = JOptionPane.showConfirmDialog(this, "Загрузить заново данные о дистанции?");

        if  (result == JOptionPane.YES_OPTION) {
            try {
                scriptLogic.loadDistances(null);
            } catch (Exception ex) {
                logger.error(ex.getMessage(), ex);
                JOptionPane.showMessageDialog(this, ex.getMessage(), null, JOptionPane.ERROR_MESSAGE);
            } finally {
                initDistances();
                initGroups();
                initLaps();
            }
        }
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        int result = JOptionPane.showConfirmDialog(this, "Заново составить стартовый протокол и удалить результаты?");

        if  (result == JOptionPane.YES_OPTION) {
            try {
                competitionLogic.generateStartList();
            } catch (Exception ex) {
                logger.error(ex.getMessage(), ex);
                JOptionPane.showMessageDialog(this, ex.getMessage(), null, JOptionPane.ERROR_MESSAGE);
            } finally {
                initDistanceParts();
                initFinish();
            }
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        int result = jFileChooser1.showSaveDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File file = jFileChooser1.getSelectedFile();
            //This is where a real application would open the file.
            logger.info("Saving to file: " + file.getName() + ".");
            try {
                scriptLogic.exportChipData(file.getPath());
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            } 

        } else {
            logger.info("Open command cancelled by user.");
        }
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void finishTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_finishTableMouseClicked
        if (evt.getClickCount() == 2) {
            int rowIndex = finishTable.getSelectedRow();
            String fullNumber = (String)finishTable.getValueAt(rowIndex, 0);
            DistancePart distancePart = competitionLogic.findDistancePartByFullTeamNumber(fullNumber);
            List<LapPart> lapParts = competitionLogic.findLapPartsByDistancePart(distancePart);
            final DistancePartDialog distancePartDialog = new DistancePartDialog(this, distancePart, lapParts, true);
            distancePartDialog.setListener(new DistancePartDialog.Listener(){

                public void onSave() {
                    DistancePart distancePart = distancePartDialog.getDistancePart();
                    distancePartDialog.setVisible(false);
                    distancePartDao.update(distancePart);
                    List<LapPart> lapParts = distancePartDialog.getLapParts();
                    for(LapPart lapPart : lapParts) {
                        lapPartDao.update(lapPart);
                    }
                    initFinish();
                }

                public void onCancel() {
                    distancePartDialog.setVisible(false);
                }

            });
            distancePartDialog.setVisible(true);
        }
    }//GEN-LAST:event_finishTableMouseClicked

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
      int result = jFileChooser1.showSaveDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File file = jFileChooser1.getSelectedFile();
            //This is where a real application would open the file.
            logger.info("Saving to file: " + file.getName() + ".");
            try {
                scriptLogic.exportResultsByGroup(file.getPath());
                JOptionPane.showMessageDialog(this, "Результаты выгружены в " + file.getPath());
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }

        } else {
            logger.info("Open command cancelled by user.");
        }

    }//GEN-LAST:event_jMenuItem5ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable delegationTable;
    private javax.swing.JTable distancePartTable;
    private javax.swing.JTable distanceTable;
    private javax.swing.JTable finishTable;
    private javax.swing.JTable groupTable;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JDialog jDialog2;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable lapTable;
    private javax.swing.JTable teamMemberTable;
    private javax.swing.JTable teamTable;
    // End of variables declaration//GEN-END:variables

}
