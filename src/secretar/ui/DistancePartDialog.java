/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DistancePartDialog.java
 *
 * Created on 18.10.2009, 3:30:55
 */
package secretar.ui;

import java.awt.geom.CubicCurve2D;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.event.TableModelListener;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import secretar.objects.DistancePart;
import secretar.objects.LapPart;

/**
 *
 * @author sfilatov
 */
public class DistancePartDialog extends javax.swing.JDialog {

    private DistancePart distancePart;
    private List<LapPart> lapParts;
    private Listener listener;

    public Listener getListener() {
        return listener;
    }

    public void setListener(Listener listener) {
        this.listener = listener;
    }

    public DistancePart getDistancePart() {
        return distancePart;
    }

    public List<LapPart> getLapParts() {
        return lapParts;
    }

    /** Creates new form DistancePartDialog */
    public DistancePartDialog(java.awt.Frame parent, DistancePart distancePart, List<LapPart> lapParts, boolean modal) {
        super(parent, modal);
        this.distancePart = distancePart;
        this.lapParts = lapParts;
        initComponents();
        initAdditionalComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        plusTimeSpinner = new javax.swing.JSpinner();
        finishTimeSpinner = new javax.swing.JSpinner();
        minusTimeSpinner = new javax.swing.JSpinner();
        jScrollPane1 = new javax.swing.JScrollPane();
        lapPartTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Время прохождения");

        jButton1.setText("Сохранить");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Отмена");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel2.setText("Отсечки");

        jLabel3.setText("Штрафное время");

        plusTimeSpinner.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), null, null, java.util.Calendar.SECOND));
        plusTimeSpinner.setEditor(new javax.swing.JSpinner.DateEditor(plusTimeSpinner, "HH:mm:ss"));

        finishTimeSpinner.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), null, null, java.util.Calendar.SECOND));
        finishTimeSpinner.setEditor(new javax.swing.JSpinner.DateEditor(finishTimeSpinner, "HH:mm:ss"));

        minusTimeSpinner.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), null, null, java.util.Calendar.SECOND));
        minusTimeSpinner.setEditor(new javax.swing.JSpinner.DateEditor(minusTimeSpinner, "HH:mm:ss"));

        lapPartTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(lapPartTable);
        lapPartTable.getColumnModel().getColumn(1).setResizable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel2)
                                .addComponent(minusTimeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(finishTimeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(plusTimeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 592, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(5, 5, 5)
                        .addComponent(finishTimeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(minusTimeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(plusTimeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 281, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        distancePart.setFinishTime((Date) finishTimeSpinner.getValue());
        distancePart.setPlusTime((Date) plusTimeSpinner.getValue());
        distancePart.setMinusTime((Date) minusTimeSpinner.getValue());
        listener.onSave();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        listener.onCancel();
    }//GEN-LAST:event_jButton2ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner finishTimeSpinner;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable lapPartTable;
    private javax.swing.JSpinner minusTimeSpinner;
    private javax.swing.JSpinner plusTimeSpinner;
    // End of variables declaration//GEN-END:variables


    private String[] comboItems = new String[]{"В процессе", "Пройден","Снятие", "Снятие с дистанции"};

    private void initAdditionalComponents() {
        Calendar calendar = Calendar.getInstance();
        calendar.set(Calendar.YEAR, 0);
        calendar.set(Calendar.MONTH, 0);
        calendar.set(Calendar.DAY_OF_MONTH, 0);
        calendar.set(Calendar.HOUR, 0);
        calendar.set(Calendar.MINUTE, 0);
        calendar.set(Calendar.SECOND, 0);
        calendar.set(Calendar.MILLISECOND, 0);
        Date zeroTime = calendar.getTime();

        if (distancePart.getFinishTime() != null) {
            finishTimeSpinner.setValue(distancePart.getFinishTime());
        } else {
            finishTimeSpinner.setValue(zeroTime);
        }

        if (distancePart.getPlusTime() != null) {
            plusTimeSpinner.setValue(distancePart.getPlusTime());
        } else {
            plusTimeSpinner.setValue(zeroTime);
        }

        if (distancePart.getMinusTime() != null) {
            minusTimeSpinner.setValue(distancePart.getMinusTime());
        } else {
            minusTimeSpinner.setValue(zeroTime);
        }

        lapPartTable.setModel(new CustomTableModel());

        lapPartTable.getColumnModel().getColumn(0).setPreferredWidth(20);
        TableColumn column = lapPartTable.getColumnModel().getColumn(2);
        JComboBox comboBox = new JComboBox();
        comboBox.addItem(comboItems[0]);
        comboBox.addItem(comboItems[1]);
        comboBox.addItem(comboItems[2]);
        comboBox.addItem(comboItems[3]);
        column.setCellEditor(new DefaultCellEditor(comboBox));
        column.setPreferredWidth(50);

    }

    public static interface Listener {

        void onSave();

        void onCancel();
    }

    private class CustomTableModel implements TableModel {

        Class[] types = new Class[]{
            java.lang.Integer.class, java.lang.String.class, java.lang.String.class
        };
        boolean[] canEdit = new boolean[]{
            false, false, true
        };
        String[] columnNames = new String[]{
            "Номер", "Название", "Прохождение"
        };
        public Class getColumnClass(int columnIndex) {
            return types[columnIndex];
        }

        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit[columnIndex];
        }

        public int getRowCount() {
            return lapParts.size();
        }

        public int getColumnCount() {
            return 3;
        }

        public String getColumnName(int arg0) {
            return columnNames[arg0];
        }

        public Object getValueAt(int arg0, int arg1) {
            LapPart lapPart = lapParts.get(arg0);
            switch(arg1){
                case 0:
                    return lapPart.getLap().getNumber();
                case 1:
                    return lapPart.getLap().getName();
                case 2:
                    return comboItems[lapPart.getLapState()];
            }
            return "";
        }

        public void setValueAt(Object arg0, int arg1, int arg2) {
            LapPart lapPart = lapParts.get(arg1);
            if (arg2 == 2) {
                int index = Arrays.binarySearch(comboItems, arg0);
                if (index < 0) index = 0;
                lapPart.setLapState(index);
            }
        }

        public void addTableModelListener(TableModelListener arg0) {
            
        }

        public void removeTableModelListener(TableModelListener arg0) {
            
        }
    }
}
